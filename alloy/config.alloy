discovery.docker "linux" {
  host = "unix:///var/run/docker.sock"
}

discovery.relabel "docker" {
    targets = discovery.docker.linux.targets

    rule {
        source_labels = ["__meta_docker_container_name"]
        target_label  = "botanix_federation_rpc_member"
	    action        = "replace"
    }

    rule {
        source_labels = ["__meta_docker_container_name"]
        action        = "keep"
        regex         = "/(?i)\b(botanix|poa|rpc)\b"
    }
}

loki.source.docker "default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.relabel.docker.output
  labels     = {"node"="botanix-federation-rpc-member", "node_type"="rpc-node" }
  forward_to = [loki.process.filter_logs.receiver]
}

loki.process "filter_logs" {
  stage.drop {
       source = ""
       expression  = ".*Not in turn"
       drop_counter_reason = "noisy"
  }

  stage.drop {
    source = ""
    expression = ".*Epoch manager"
    drop_counter_reason = "noisy"
  }

  stage.docker {}

  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "https://loki-fed.botanixlabs.dev/loki/api/v1/push"
    tenant_id = "botanix-federation-member"
  }
}

tracing {
  sampling_fraction = 0.1
  write_to          = [otelcol.exporter.otlphttp.default.input]
}

otelcol.receiver.otlp "federation" {
  grpc {
    endpoint = "127.0.0.1:4317"
  }

  http {
    endpoint = "127.0.0.1:4318"
  }

  output {
    logs    = [otelcol.processor.batch.federation.input]
    traces  = [otelcol.processor.batch.federation.input]
  }
}

otelcol.processor.batch "federation" {
  output {
    logs    = [otelcol.exporter.loki.federation.input]
    traces  = [otelcol.exporter.otlphttp.default.input]
  }
}

otelcol.exporter.loki "federation" {
	forward_to = [loki.write.default.receiver]
}

otelcol.exporter.otlphttp "default" {
    client {
        endpoint = "https://tempo.botanixlabs.dev"
    }
}
